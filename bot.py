import os
import pytesseract
import cv2
import tempfile
from telegram import Update, InputFile
from telegram.ext import ApplicationBuilder, MessageHandler, filters, ContextTypes

# –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
TOKEN = os.getenv("TOKEN")
–ò–ú–Ø_–í–õ–ê–î–ï–õ–¨–¶–ê = os.getenv("OWNER_NAME")
MBANK_NUMBER = os.getenv("MBANK_NUMBER")
QR_PATH = "qr.png"  # –§–∞–π–ª —Å QR-–∫–æ–¥–æ–º —Ä—è–¥–æ–º —Å bot.py

# –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ–æ—Ç–æ
async def —Ä—É—á–∫–∞_—Ñ–æ—Ç–æ(update: Update, context: ContextTypes.DEFAULT_TYPE):
    –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å = update.message.from_user

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ñ–æ—Ç–æ –≤–æ –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
    —Ñ–æ—Ç–æ = await update.message.photo[-1].get_file()
    with tempfile.NamedTemporaryFile(delete=False, suffix=".jpg") as tf:
        –ø—É—Ç—å = tf.name
        await —Ñ–æ—Ç–æ.download_to_drive(–ø—É—Ç—å)

    # OCR
    –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ = cv2.imread(–ø—É—Ç—å)
    —Å–µ—Ä–æ–µ = cv2.cvtColor(–∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ, cv2.COLOR_BGR2GRAY)
    —Ç–µ–∫—Å—Ç = pytesseract.image_to_string(—Å–µ—Ä–æ–µ)

    —Å—É–º–º–∞ = None
    for —Å–ª–æ–≤–æ in —Ç–µ–∫—Å—Ç.split():
        —Å–ª–æ–≤–æ = —Å–ª–æ–≤–æ.replace(",", ".").replace("—Å", "5")
        try:
            —á–∏—Å–ª–æ = float(—Å–ª–æ–≤–æ)
            if 50 < —á–∏—Å–ª–æ < 100000:
                —Å—É–º–º–∞ = —á–∏—Å–ª–æ
                break
        except:
            continue

    —Å–æ–æ–±—â–µ–Ω–∏–µ = "‚úÖ –°–ø–∞—Å–∏–±–æ, –æ—Ç—á—ë—Ç –ø–æ–ª—É—á–µ–Ω!\n\n"

    if —Å—É–º–º–∞:
        –ø—Ä–æ—Ü–µ–Ω—Ç = round(—Å—É–º–º–∞ * 0.3, 2)
        —Å–æ–æ–±—â–µ–Ω–∏–µ += f"üí∞ –ù–∞–π–¥–µ–Ω–∞ —Å—É–º–º–∞: *{—Å—É–º–º–∞}*\n"
        —Å–æ–æ–±—â–µ–Ω–∏–µ += f"üí∏ –ü–µ—Ä–µ–≤–µ–¥–∏ 30% ‚Üí *{–ø—Ä–æ—Ü–µ–Ω—Ç}*\n\n"
    else:
        —Å–æ–æ–±—â–µ–Ω–∏–µ += "‚ùó –ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å —Å—É–º–º—É —Å —Ñ–æ—Ç–æ.\n\n"

    —Å–æ–æ–±—â–µ–Ω–∏–µ += f"üì± Mbank: `{MBANK_NUMBER}`\nüë§ –ò–º—è: *{–ò–ú–Ø_–í–õ–ê–î–ï–õ–¨–¶–ê}*"

    await update.message.reply_text(—Å–æ–æ–±—â–µ–Ω–∏–µ, parse_mode="Markdown")

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º QR
    if os.path.exists(QR_PATH):
        with open(QR_PATH, "rb") as qr:
            await update.message.reply_photo(photo=InputFile(qr), caption="üì∏ –°–∫–∞–Ω–∏—Ä—É–π QR-–∫–æ–¥ –¥–ª—è –æ–ø–ª–∞—Ç—ã")

# –ó–∞–ø—É—Å–∫
if __name__ == "__main__":
    app = ApplicationBuilder().token(TOKEN).build()
    app.add_handler(MessageHandler(filters.PHOTO, —Ä—É—á–∫–∞_—Ñ–æ—Ç–æ))
    print("ü§ñ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω!")
    app.run_polling()
